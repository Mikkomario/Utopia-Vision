package utopia.vision.event;

import java.util.ArrayList;
import java.util.List;

import utopia.inception.event.Event;
import utopia.inception.event.MultiEventSelector;
import utopia.inception.event.StrictEventSelector;
import utopia.vision.resource.Sprite;
import utopia.vision.resource.SpriteDrawer;

/**
 * Animation events are generated by sprite drawers when animation proceeds and / or finishes
 * @author Mikko Hilpinen
 * @since 20.5.2016
 */
public class AnimationEvent implements Event
{
	// ATTRIBUTES	----------------
	
	private EventType type;
	private SpriteDrawer source;
	private Sprite sprite;
	
	private List<Event.Feature> features = new ArrayList<>();
	
	
	// CONSTRUCTOR	----------------
	
	/**
	 * Creates a new event
	 * @param type The type of the event
	 * @param source The sprite drawer originating the event
	 * @param sprite The sprite that was being animated
	 */
	public AnimationEvent(EventType type, SpriteDrawer source, Sprite sprite)
	{
		this.type = type;
		this.source = source;
		this.sprite = sprite;
		
		this.features.add(this.type);
	}
	
	
	// IMPLEMENTED METHODS	--------

	@Override
	public List<Event.Feature> getFeatures()
	{
		return this.features;
	}
	
	
	// ACCESSORS	----------------
	
	/**
	 * @return The type of the animation event
	 */
	public EventType getType()
	{
		return this.type;
	}
	
	/**
	 * @return The drawer that originated the event
	 */
	public SpriteDrawer getSource()
	{
		return this.source;
	}
	
	/**
	 * @return The sprite that was used in the animation. This is the new sprite in 
	 * {@link EventType#SPRITE_CHANGED} event
	 */
	public Sprite getSprite()
	{
		return this.sprite;
	}
	
	
	// OTHER METHODS	-------------
	
	/**
	 * Checks whether the event is of the provided event type
	 * @param type an event type
	 * @return Is this event of the provided type
	 */
	public boolean isOfType(EventType type)
	{
		return getType().equals(type);
	}
	
	/**
	 * Creates an event selector that only accepts events of a single type
	 * @param selectedType The type of event selected
	 * @return An event selector that accepts events of a single type
	 */
	public static StrictEventSelector<AnimationEvent, Feature> createSingleTypeSelector(EventType selectedType)
	{
		StrictEventSelector<AnimationEvent, Feature> selector = new StrictEventSelector<>();
		selector.addRequiredFeature(selectedType);
		
		return selector;
	}
	
	/**
	 * Creates an event selector that accepts events of multiple types
	 * @param types The types of events accepted by the selector
	 * @return An event selector that accepts multiple types
	 */
	public static MultiEventSelector<AnimationEvent> createTypeSelector(EventType... types)
	{
		MultiEventSelector<AnimationEvent> selector = new MultiEventSelector<>();
		for (EventType type : types)
		{
			selector.addOption(createSingleTypeSelector(type));
		}
		
		return selector;
	}

	
	// INTERFACES	----------------
	
	/**
	 * A wrapper interface for features applicable to animation events
	 * @author Mikko Hilpinen
	 * @since 20.5.2016
	 */
	public static interface Feature extends Event.Feature
	{
		// Used as a wrapper for animation event features
	}
	
	
	// ENUMERATIONS	-----------------
	
	/**
	 * These are the different types of animation events
	 * @author Mikko Hilpinen
	 * @since 20.5.2016
	 */
	public static enum EventType implements Feature
	{
		/**
		 * These events are generated each time a frame is changed in an animation
		 */
		FRAME_CHANGED,
		/**
		 * These events are generated each time an animation comes to an end
		 */
		ANIMATION_COMPLETED,
		/**
		 * These events are generated when the animated sprite changes
		 */
		SPRITE_CHANGED,
		/**
		 * These events are generated when an animation is reset
		 */
		ANIMATION_RESET,
		/**
		 * These events are generated when an animation is suspended (temporarily or 
		 * permanently).
		 */
		ANIMATION_SUSPENDED,
		/**
		 * These events are generated when an animation is resumed.
		 */
		ANIMATION_RESUMED;
	}
}
